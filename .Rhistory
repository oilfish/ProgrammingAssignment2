source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/Desktop/two.R')
source('C:/Users/Tushar/Desktop/two.R')
## This is a function written for solving week 3 assignament
makeCacheMatrix <- function(x = matrix()) { ## function to create a matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/Desktop/one.R')
## following is a function to get the inverse of the matrix
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## This is a function written for solving week 3 assignament
makeCacheMatrix <- function(x = matrix()) { ## function to create a matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## following is a function to get the inverse of the matrix
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
rm(list=ls())
source('C:/Users/Tushar/Desktop/one.R')
}
source('C:/Users/Tushar/Desktop/one.R')
source('C:/Users/Tushar/ProgrammingAssignment2/cachematrix.R')
